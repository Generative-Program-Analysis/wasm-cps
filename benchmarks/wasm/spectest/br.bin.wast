(module definition binary
  "\00\61\73\6d\01\00\00\00\01\a7\80\80\80\00\08\60"
  "\00\00\60\00\02\7c\7c\60\00\01\7f\60\00\01\7e\60"
  "\00\02\7f\7e\60\02\7f\7f\01\7f\60\03\7f\7f\7f\01"
  "\7f\60\00\01\7d\03\b0\80\80\80\00\2f\00\00\00\00"
  "\00\01\00\00\00\02\02\02\02\02\00\02\02\00\02\02"
  "\03\04\02\05\05\06\02\02\02\02\02\02\07\02\03\02"
  "\02\02\02\02\02\02\02\02\02\02\02\07\a9\86\80\80"
  "\00\2d\0c\74\79\70\65\2d\69\33\32\2d\69\33\32\00"
  "\01\0c\74\79\70\65\2d\69\36\34\2d\69\36\34\00\02"
  "\0c\74\79\70\65\2d\66\33\32\2d\66\33\32\00\03\0c"
  "\74\79\70\65\2d\66\36\34\2d\66\36\34\00\04\12\74"
  "\79\70\65\2d\66\36\34\2d\66\36\34\2d\76\61\6c\75"
  "\65\00\05\0e\61\73\2d\62\6c\6f\63\6b\2d\66\69\72"
  "\73\74\00\06\0c\61\73\2d\62\6c\6f\63\6b\2d\6d\69"
  "\64\00\07\0d\61\73\2d\62\6c\6f\63\6b\2d\6c\61\73"
  "\74\00\08\0e\61\73\2d\62\6c\6f\63\6b\2d\76\61\6c"
  "\75\65\00\09\0d\61\73\2d\6c\6f\6f\70\2d\66\69\72"
  "\73\74\00\0a\0b\61\73\2d\6c\6f\6f\70\2d\6d\69\64"
  "\00\0b\0c\61\73\2d\6c\6f\6f\70\2d\6c\61\73\74\00"
  "\0c\0b\61\73\2d\62\72\2d\76\61\6c\75\65\00\0d\0d"
  "\61\73\2d\62\72\5f\69\66\2d\63\6f\6e\64\00\0e\0e"
  "\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65\00\0f"
  "\13\61\73\2d\62\72\5f\69\66\2d\76\61\6c\75\65\2d"
  "\63\6f\6e\64\00\10\11\61\73\2d\62\72\5f\74\61\62"
  "\6c\65\2d\69\6e\64\65\78\00\11\11\61\73\2d\62\72"
  "\5f\74\61\62\6c\65\2d\76\61\6c\75\65\00\12\17\61"
  "\73\2d\62\72\5f\74\61\62\6c\65\2d\76\61\6c\75\65"
  "\2d\69\6e\64\65\78\00\13\0f\61\73\2d\72\65\74\75"
  "\72\6e\2d\76\61\6c\75\65\00\14\10\61\73\2d\72\65"
  "\74\75\72\6e\2d\76\61\6c\75\65\73\00\15\0a\61\73"
  "\2d\69\66\2d\63\6f\6e\64\00\16\0a\61\73\2d\69\66"
  "\2d\74\68\65\6e\00\17\0a\61\73\2d\69\66\2d\65\6c"
  "\73\65\00\18\0d\61\73\2d\63\61\6c\6c\2d\66\69\72"
  "\73\74\00\1a\0b\61\73\2d\63\61\6c\6c\2d\6d\69\64"
  "\00\1b\0c\61\73\2d\63\61\6c\6c\2d\6c\61\73\74\00"
  "\1c\0b\61\73\2d\63\61\6c\6c\2d\61\6c\6c\00\1d\12"
  "\61\73\2d\6c\6f\63\61\6c\2e\73\65\74\2d\76\61\6c"
  "\75\65\00\1e\12\61\73\2d\6c\6f\63\61\6c\2e\74\65"
  "\65\2d\76\61\6c\75\65\00\1f\10\61\73\2d\75\6e\61"
  "\72\79\2d\6f\70\65\72\61\6e\64\00\20\0e\61\73\2d"
  "\62\69\6e\61\72\79\2d\6c\65\66\74\00\21\0f\61\73"
  "\2d\62\69\6e\61\72\79\2d\72\69\67\68\74\00\22\0e"
  "\61\73\2d\62\69\6e\61\72\79\2d\62\6f\74\68\00\23"
  "\0f\61\73\2d\74\65\73\74\2d\6f\70\65\72\61\6e\64"
  "\00\24\0f\61\73\2d\63\6f\6d\70\61\72\65\2d\6c\65"
  "\66\74\00\25\10\61\73\2d\63\6f\6d\70\61\72\65\2d"
  "\72\69\67\68\74\00\26\0f\61\73\2d\63\6f\6d\70\61"
  "\72\65\2d\62\6f\74\68\00\27\12\61\73\2d\63\6f\6e"
  "\76\65\72\74\2d\6f\70\65\72\61\6e\64\00\28\12\6e"
  "\65\73\74\65\64\2d\62\6c\6f\63\6b\2d\76\61\6c\75"
  "\65\00\29\0f\6e\65\73\74\65\64\2d\62\72\2d\76\61"
  "\6c\75\65\00\2a\12\6e\65\73\74\65\64\2d\62\72\5f"
  "\69\66\2d\76\61\6c\75\65\00\2b\17\6e\65\73\74\65"
  "\64\2d\62\72\5f\69\66\2d\76\61\6c\75\65\2d\63\6f"
  "\6e\64\00\2c\15\6e\65\73\74\65\64\2d\62\72\5f\74"
  "\61\62\6c\65\2d\76\61\6c\75\65\00\2d\1b\6e\65\73"
  "\74\65\64\2d\62\72\5f\74\61\62\6c\65\2d\76\61\6c"
  "\75\65\2d\69\6e\64\65\78\00\2e\0a\94\87\80\80\00"
  "\2f\82\80\80\80\00\00\0b\89\80\80\80\00\00\02\40"
  "\0c\00\6a\1a\0b\0b\89\80\80\80\00\00\02\40\0c\00"
  "\7c\1a\0b\0b\89\80\80\80\00\00\02\40\0c\00\92\1a"
  "\0b\0b\89\80\80\80\00\00\02\40\0c\00\a0\1a\0b\0b"
  "\a3\80\80\80\00\00\02\01\44\00\00\00\00\00\00\10"
  "\40\44\00\00\00\00\00\00\14\40\0c\00\a0\44\00\00"
  "\00\00\00\00\18\40\0b\0b\89\80\80\80\00\00\02\40"
  "\0c\00\10\00\0b\0b\8b\80\80\80\00\00\02\40\10\00"
  "\0c\00\10\00\0b\0b\8a\80\80\80\00\00\02\40\01\10"
  "\00\0c\00\0b\0b\8c\80\80\80\00\00\02\7f\01\10\00"
  "\41\02\0c\00\0b\0b\8e\80\80\80\00\00\02\7f\03\7f"
  "\41\03\0c\01\41\02\0b\0b\0b\90\80\80\80\00\00\02"
  "\7f\03\7f\10\00\41\04\0c\01\41\02\0b\0b\0b\8f\80"
  "\80\80\00\00\02\7f\03\7f\01\10\00\41\05\0c\01\0b"
  "\0b\0b\8b\80\80\80\00\00\02\7f\41\09\0c\00\0c\00"
  "\0b\0b\89\80\80\80\00\00\02\40\0c\00\0d\00\0b\0b"
  "\90\80\80\80\00\00\02\7f\41\08\0c\00\41\01\0d\00"
  "\1a\41\07\0b\0b\90\80\80\80\00\00\02\7f\41\06\41"
  "\09\0c\00\0d\00\1a\41\07\0b\0b\8c\80\80\80\00\00"
  "\02\40\0c\00\0e\02\00\00\00\0b\0b\92\80\80\80\00"
  "\00\02\7f\41\0a\0c\00\41\01\0e\02\00\00\00\41\07"
  "\0b\0b\91\80\80\80\00\00\02\7f\41\06\41\0b\0c\00"
  "\0e\01\00\00\41\07\0b\0b\8a\80\80\80\00\00\02\7e"
  "\42\07\0c\00\0f\0b\0b\8e\80\80\80\00\00\41\02\02"
  "\7e\41\01\42\07\0c\00\0f\0b\0b\91\80\80\80\00\00"
  "\02\7f\41\02\0c\00\04\7f\41\00\05\41\01\0b\0b\0b"
  "\91\80\80\80\00\00\02\7f\20\00\04\7f\41\03\0c\01"
  "\05\20\01\0b\0b\0b\91\80\80\80\00\00\02\7f\20\00"
  "\04\7f\20\01\05\41\04\0c\01\0b\0b\0b\84\80\80\80"
  "\00\00\41\7f\0b\8f\80\80\80\00\00\02\7f\41\0c\0c"
  "\00\41\02\41\03\10\19\0b\0b\8f\80\80\80\00\00\02"
  "\7f\41\01\41\0d\0c\00\41\03\10\19\0b\0b\8f\80\80"
  "\80\00\00\02\7f\41\01\41\02\41\0e\0c\00\10\19\0b"
  "\0b\8b\80\80\80\00\00\02\7f\41\0f\0c\00\10\19\0b"
  "\0b\8f\80\80\80\00\01\01\7d\02\7f\41\11\0c\00\21"
  "\00\41\7f\0b\0b\8d\80\80\80\00\01\01\7f\02\7f\41"
  "\01\0c\00\22\00\0b\0b\8d\80\80\80\00\00\02\7d\43"
  "\9a\99\59\40\0c\00\8c\0b\0b\8c\80\80\80\00\00\02"
  "\7f\41\03\0c\00\41\0a\6a\0b\0b\8c\80\80\80\00\00"
  "\02\7e\42\0a\42\2d\0c\00\7d\0b\0b\8a\80\80\80\00"
  "\00\02\7f\41\2e\0c\00\6a\0b\0b\8a\80\80\80\00\00"
  "\02\7f\41\2c\0c\00\45\0b\0b\93\80\80\80\00\00\02"
  "\7f\41\2b\0c\00\44\00\00\00\00\00\00\24\40\65\0b"
  "\0b\8f\80\80\80\00\00\02\7f\43\00\00\20\41\41\2a"
  "\0c\00\5c\0b\0b\8a\80\80\80\00\00\02\7f\41\2c\0c"
  "\00\65\0b\0b\8a\80\80\80\00\00\02\7f\41\29\0c\00"
  "\a7\0b\0b\91\80\80\80\00\00\41\01\02\7f\10\00\41"
  "\04\41\08\0c\00\6a\0b\6a\0b\9a\80\80\80\00\00\41"
  "\01\02\7f\41\02\1a\02\7f\41\04\1a\41\08\0c\01\0c"
  "\00\0b\1a\41\10\0b\6a\0b\9f\80\80\80\00\00\41\01"
  "\02\7f\41\02\1a\02\7f\41\04\1a\41\08\0c\01\41\01"
  "\0d\00\1a\41\20\0b\1a\41\10\0b\6a\0b\96\80\80\80"
  "\00\00\41\01\02\7f\41\02\1a\41\04\41\08\0c\00\0d"
  "\00\1a\41\10\0b\6a\0b\9d\80\80\80\00\00\41\01\02"
  "\7f\41\02\1a\02\7f\41\04\1a\41\08\0c\01\41\01\0e"
  "\00\00\0b\1a\41\10\0b\6a\0b\96\80\80\80\00\00\41"
  "\01\02\7f\41\02\1a\41\04\41\08\0c\00\0e\00\00\41"
  "\10\0b\6a\0b"
)
(module instance)
(assert_return (invoke "type-i32-i32"))
(assert_return (invoke "type-i64-i64"))
(assert_return (invoke "type-f32-f32"))
(assert_return (invoke "type-f64-f64"))
(assert_return
  (invoke "type-f64-f64-value")
  (f64.const 0x1p+2)
  (f64.const 0x1.4p+2)
)
(assert_return (invoke "as-block-first"))
(assert_return (invoke "as-block-mid"))
(assert_return (invoke "as-block-last"))
(assert_return (invoke "as-block-value") (i32.const 0x2))
(assert_return (invoke "as-loop-first") (i32.const 0x3))
(assert_return (invoke "as-loop-mid") (i32.const 0x4))
(assert_return (invoke "as-loop-last") (i32.const 0x5))
(assert_return (invoke "as-br-value") (i32.const 0x9))
(assert_return (invoke "as-br_if-cond"))
(assert_return (invoke "as-br_if-value") (i32.const 0x8))
(assert_return (invoke "as-br_if-value-cond") (i32.const 0x9))
(assert_return (invoke "as-br_table-index"))
(assert_return (invoke "as-br_table-value") (i32.const 0xa))
(assert_return (invoke "as-br_table-value-index") (i32.const 0xb))
(assert_return (invoke "as-return-value") (i64.const 0x7))
(assert_return (invoke "as-return-values") (i32.const 0x2) (i64.const 0x7))
(assert_return (invoke "as-if-cond") (i32.const 0x2))
(assert_return
  (invoke "as-if-then" (i32.const 0x1) (i32.const 0x6))
  (i32.const 0x3)
)
(assert_return
  (invoke "as-if-then" (i32.const 0x0) (i32.const 0x6))
  (i32.const 0x6)
)
(assert_return
  (invoke "as-if-else" (i32.const 0x0) (i32.const 0x6))
  (i32.const 0x4)
)
(assert_return
  (invoke "as-if-else" (i32.const 0x1) (i32.const 0x6))
  (i32.const 0x6)
)
(assert_return (invoke "as-call-first") (i32.const 0xc))
(assert_return (invoke "as-call-mid") (i32.const 0xd))
(assert_return (invoke "as-call-last") (i32.const 0xe))
(assert_return (invoke "as-call-all") (i32.const 0xf))
(assert_return (invoke "as-local.set-value") (i32.const 0x11))
(assert_return (invoke "as-local.tee-value") (i32.const 0x1))
(assert_return (invoke "as-unary-operand") (f32.const 0x1.b333_34p+1))
(assert_return (invoke "as-binary-left") (i32.const 0x3))
(assert_return (invoke "as-binary-right") (i64.const 0x2d))
(assert_return (invoke "as-binary-both") (i32.const 0x2e))
(assert_return (invoke "as-test-operand") (i32.const 0x2c))
(assert_return (invoke "as-compare-left") (i32.const 0x2b))
(assert_return (invoke "as-compare-right") (i32.const 0x2a))
(assert_return (invoke "as-compare-both") (i32.const 0x2c))
(assert_return (invoke "as-convert-operand") (i32.const 0x29))
(assert_return (invoke "as-memory.grow-size") (i32.const 0x28))
(assert_return (invoke "nested-block-value") (i32.const 0x9))
(assert_return (invoke "nested-br-value") (i32.const 0x9))
(assert_return (invoke "nested-br_if-value") (i32.const 0x9))
(assert_return (invoke "nested-br_if-value-cond") (i32.const 0x9))
(assert_return (invoke "nested-br_table-value") (i32.const 0x9))
(assert_return (invoke "nested-br_table-value-index") (i32.const 0x9))

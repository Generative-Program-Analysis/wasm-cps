(module definition binary
  "\00\61\73\6d\01\00\00\00\01\e3\81\80\80\00\18\60"
  "\00\01\7f\60\00\01\7e\60\00\01\7d\60\00\01\7c\60"
  "\00\02\7f\7e\60\01\7f\01\7f\60\01\7e\01\7e\60\01"
  "\7d\01\7d\60\01\7c\01\7c\60\02\7f\7c\02\7f\7c\60"
  "\02\7f\7f\02\7f\7f\60\02\7d\7c\02\7c\7d\60\02\7c"
  "\7f\02\7f\7c\60\02\7d\7f\01\7f\60\02\7f\7e\01\7e"
  "\60\02\7c\7d\01\7d\60\02\7e\7c\01\7c\60\00\02\7f"
  "\7c\60\00\02\7f\7f\60\00\02\7c\7d\60\02\7e\7e\01"
  "\7e\60\01\7e\01\7f\60\00\00\60\64\7d\7f\7f\7c\7d"
  "\7d\7d\7c\7d\7f\7f\7d\7c\7e\7e\7f\7e\7e\7d\7e\7e"
  "\7e\7f\7d\7d\7d\7c\7d\7f\7e\7d\7c\7c\7d\7f\7d\7d"
  "\7c\7e\7c\7f\7e\7d\7c\7f\7f\7f\7e\7c\7f\7e\7e\7c"
  "\7c\7c\7c\7c\7c\7f\7d\7c\7c\7f\7e\7d\7d\7d\7f\7c"
  "\7c\7c\7c\7c\7d\7e\7e\7f\7f\7f\7d\7c\7f\7e\7d\7d"
  "\7d\7f\7f\7d\7c\7e\7d\7c\7d\7d\7d\7f\7d\7e\7f\01"
  "\7f\03\be\80\80\80\00\3d\00\01\02\03\04\05\06\07"
  "\08\09\0a\0b\0c\0d\0e\0f\10\00\01\02\03\04\00\01"
  "\02\03\00\01\02\03\11\12\13\11\00\00\12\06\14\06"
  "\15\15\16\16\16\00\00\00\00\16\00\00\05\07\00\00"
  "\00\00\00\17\05\07\8b\85\80\80\00\28\08\74\79\70"
  "\65\2d\69\33\32\00\11\08\74\79\70\65\2d\69\36\34"
  "\00\12\08\74\79\70\65\2d\66\33\32\00\13\08\74\79"
  "\70\65\2d\66\36\34\00\14\0c\74\79\70\65\2d\69\33"
  "\32\2d\69\36\34\00\15\0e\74\79\70\65\2d\66\69\72"
  "\73\74\2d\69\33\32\00\16\0e\74\79\70\65\2d\66\69"
  "\72\73\74\2d\69\36\34\00\17\0e\74\79\70\65\2d\66"
  "\69\72\73\74\2d\66\33\32\00\18\0e\74\79\70\65\2d"
  "\66\69\72\73\74\2d\66\36\34\00\19\0f\74\79\70\65"
  "\2d\73\65\63\6f\6e\64\2d\69\33\32\00\1a\0f\74\79"
  "\70\65\2d\73\65\63\6f\6e\64\2d\69\36\34\00\1b\0f"
  "\74\79\70\65\2d\73\65\63\6f\6e\64\2d\66\33\32\00"
  "\1c\0f\74\79\70\65\2d\73\65\63\6f\6e\64\2d\66\36"
  "\34\00\1d\10\74\79\70\65\2d\61\6c\6c\2d\69\33\32"
  "\2d\66\36\34\00\1e\10\74\79\70\65\2d\61\6c\6c\2d"
  "\69\33\32\2d\69\33\32\00\1f\10\74\79\70\65\2d\61"
  "\6c\6c\2d\66\33\32\2d\66\36\34\00\20\10\74\79\70"
  "\65\2d\61\6c\6c\2d\66\36\34\2d\69\33\32\00\21\16"
  "\61\73\2d\62\69\6e\61\72\79\2d\61\6c\6c\2d\6f\70"
  "\65\72\61\6e\64\73\00\22\11\61\73\2d\6d\69\78\65"
  "\64\2d\6f\70\65\72\61\6e\64\73\00\23\14\61\73\2d"
  "\63\61\6c\6c\2d\61\6c\6c\2d\6f\70\65\72\61\6e\64"
  "\73\00\24\03\66\61\63\00\25\07\66\61\63\2d\61\63"
  "\63\00\26\03\66\69\62\00\27\04\65\76\65\6e\00\28"
  "\03\6f\64\64\00\29\07\72\75\6e\61\77\61\79\00\2a"
  "\0e\6d\75\74\75\61\6c\2d\72\75\6e\61\77\61\79\00"
  "\2b\0f\61\73\2d\69\66\2d\63\6f\6e\64\69\74\69\6f"
  "\6e\00\2d\0e\61\73\2d\62\72\5f\69\66\2d\66\69\72"
  "\73\74\00\2e\0d\61\73\2d\62\72\5f\69\66\2d\6c\61"
  "\73\74\00\2f\0f\61\73\2d\72\65\74\75\72\6e\2d\76"
  "\61\6c\75\65\00\30\0f\61\73\2d\64\72\6f\70\2d\6f"
  "\70\65\72\61\6e\64\00\31\0b\61\73\2d\62\72\2d\76"
  "\61\6c\75\65\00\32\12\61\73\2d\6c\6f\63\61\6c\2e"
  "\73\65\74\2d\76\61\6c\75\65\00\33\0e\61\73\2d\62"
  "\69\6e\61\72\79\2d\6c\65\66\74\00\36\0f\61\73\2d"
  "\62\69\6e\61\72\79\2d\72\69\67\68\74\00\37\0f\61"
  "\73\2d\74\65\73\74\2d\6f\70\65\72\61\6e\64\00\38"
  "\0f\61\73\2d\63\6f\6d\70\61\72\65\2d\6c\65\66\74"
  "\00\39\10\61\73\2d\63\6f\6d\70\61\72\65\2d\72\69"
  "\67\68\74\00\3a\1e\72\65\74\75\72\6e\2d\66\72\6f"
  "\6d\2d\6c\6f\6e\67\2d\61\72\67\75\6d\65\6e\74\2d"
  "\6c\69\73\74\00\3c\0a\af\8a\80\80\00\3d\85\80\80"
  "\80\00\00\41\b2\02\0b\85\80\80\80\00\00\42\e4\02"
  "\0b\87\80\80\80\00\00\43\00\20\73\45\0b\8b\80\80"
  "\80\00\00\44\00\00\00\00\00\c8\ae\40\0b\88\80\80"
  "\80\00\00\41\b2\02\42\e4\02\0b\84\80\80\80\00\00"
  "\20\00\0b\84\80\80\80\00\00\20\00\0b\84\80\80\80"
  "\00\00\20\00\0b\84\80\80\80\00\00\20\00\0b\86\80"
  "\80\80\00\00\20\00\20\01\0b\86\80\80\80\00\00\20"
  "\01\20\00\0b\86\80\80\80\00\00\20\01\20\00\0b\86"
  "\80\80\80\00\00\20\01\20\00\0b\84\80\80\80\00\00"
  "\20\01\0b\84\80\80\80\00\00\20\01\0b\84\80\80\80"
  "\00\00\20\01\0b\84\80\80\80\00\00\20\01\0b\84\80"
  "\80\80\00\00\10\00\0b\84\80\80\80\00\00\10\01\0b"
  "\84\80\80\80\00\00\10\02\0b\84\80\80\80\00\00\10"
  "\03\0b\84\80\80\80\00\00\10\04\0b\86\80\80\80\00"
  "\00\41\20\10\05\0b\87\80\80\80\00\00\42\c0\00\10"
  "\06\0b\89\80\80\80\00\00\43\c3\f5\a8\3f\10\07\0b"
  "\8d\80\80\80\00\00\44\3d\0a\d7\a3\70\3d\fa\3f\10"
  "\08\0b\8b\80\80\80\00\00\43\66\66\00\42\41\20\10"
  "\0d\0b\89\80\80\80\00\00\41\20\42\c0\00\10\0e\0b"
  "\92\80\80\80\00\00\44\00\00\00\00\00\00\50\40\43"
  "\00\00\00\42\10\0f\0b\90\80\80\80\00\00\42\c0\00"
  "\44\66\66\66\66\66\06\50\40\10\10\0b\8f\80\80\80"
  "\00\00\41\20\44\3d\0a\d7\a3\70\3d\fa\3f\10\09\0b"
  "\88\80\80\80\00\00\41\01\41\02\10\0a\0b\92\80\80"
  "\80\00\00\43\00\00\80\3f\44\00\00\00\00\00\00\00"
  "\40\10\0b\0b\8f\80\80\80\00\00\44\00\00\00\00\00"
  "\00\f0\3f\41\02\10\0c\0b\89\80\80\80\00\00\41\03"
  "\41\04\10\0a\6a\0b\8c\80\80\80\00\00\41\03\41\04"
  "\10\0a\41\05\6a\6c\0b\8a\80\80\80\00\00\41\03\41"
  "\04\10\0a\10\0a\0b\95\80\80\80\00\00\20\00\50\04"
  "\7e\42\01\05\20\00\20\00\42\01\7d\10\25\7e\0b\0b"
  "\97\80\80\80\00\00\20\00\50\04\7e\20\01\05\20\00"
  "\42\01\7d\20\00\20\01\7e\10\26\0b\0b\9c\80\80\80"
  "\00\00\20\00\42\01\58\04\7e\42\01\05\20\00\42\02"
  "\7d\10\27\20\00\42\01\7d\10\27\7c\0b\0b\92\80\80"
  "\80\00\00\20\00\50\04\7f\41\2c\05\20\00\42\01\7d"
  "\10\29\0b\0b\93\80\80\80\00\00\20\00\50\04\7f\41"
  "\e3\00\05\20\00\42\01\7d\10\28\0b\0b\84\80\80\80"
  "\00\00\10\2a\0b\84\80\80\80\00\00\10\2c\0b\84\80"
  "\80\80\00\00\10\2b\0b\8c\80\80\80\00\00\10\00\04"
  "\7f\41\01\05\41\02\0b\0b\8b\80\80\80\00\00\02\7f"
  "\10\00\41\02\0d\00\0b\0b\8b\80\80\80\00\00\02\7f"
  "\41\02\10\00\0d\00\0b\0b\85\80\80\80\00\00\10\00"
  "\0f\0b\85\80\80\80\00\00\10\00\1a\0b\89\80\80\80"
  "\00\00\02\7f\10\00\0c\00\0b\0b\8a\80\80\80\00\01"
  "\01\7f\10\00\21\00\20\00\0b\84\80\80\80\00\00\20"
  "\00\0b\84\80\80\80\00\00\20\00\0b\8c\80\80\80\00"
  "\00\02\7f\41\01\10\34\41\0a\6a\0b\0b\8c\80\80\80"
  "\00\00\02\7f\41\0a\41\01\10\34\6b\0b\0b\8a\80\80"
  "\80\00\00\02\7f\41\01\10\34\45\0b\0b\8c\80\80\80"
  "\00\00\02\7f\41\01\10\34\41\0a\4d\0b\0b\8c\80\80"
  "\80\00\00\02\7f\41\0a\41\01\10\34\47\0b\0b\84\80"
  "\80\80\00\00\20\63\0b\df\83\80\80\00\00\43\00\00"
  "\00\00\41\00\41\00\44\00\00\00\00\00\00\00\00\43"
  "\00\00\00\00\43\00\00\00\00\43\00\00\00\00\44\00"
  "\00\00\00\00\00\00\00\43\00\00\00\00\41\00\41\00"
  "\43\00\00\00\00\44\00\00\00\00\00\00\00\00\42\00"
  "\42\00\41\00\42\00\42\00\43\00\00\00\00\42\00\42"
  "\00\42\00\41\00\43\00\00\00\00\43\00\00\00\00\43"
  "\00\00\00\00\44\00\00\00\00\00\00\00\00\43\00\00"
  "\00\00\41\00\42\00\43\00\00\00\00\44\00\00\00\00"
  "\00\00\00\00\44\00\00\00\00\00\00\00\00\43\00\00"
  "\00\00\41\00\43\00\00\00\00\43\00\00\00\00\44\00"
  "\00\00\00\00\00\00\00\42\00\44\00\00\00\00\00\00"
  "\00\00\41\00\42\00\43\00\00\00\00\44\00\00\00\00"
  "\00\00\00\00\41\00\41\00\41\00\42\00\44\00\00\00"
  "\00\00\00\00\00\41\00\42\00\42\00\44\00\00\00\00"
  "\00\00\00\00\44\00\00\00\00\00\00\00\00\44\00\00"
  "\00\00\00\00\00\00\44\00\00\00\00\00\00\00\00\44"
  "\00\00\00\00\00\00\00\00\44\00\00\00\00\00\00\00"
  "\00\41\00\43\00\00\00\00\44\00\00\00\00\00\00\00"
  "\00\44\00\00\00\00\00\00\00\00\41\00\42\00\43\00"
  "\00\00\00\43\00\00\00\00\43\00\00\00\00\41\00\44"
  "\00\00\00\00\00\00\00\00\44\00\00\00\00\00\00\00"
  "\00\44\00\00\00\00\00\00\00\00\44\00\00\00\00\00"
  "\00\00\00\44\00\00\00\00\00\00\00\00\43\00\00\00"
  "\00\42\00\42\00\41\00\41\00\41\00\43\00\00\00\00"
  "\44\00\00\00\00\00\00\00\00\41\00\42\00\43\00\00"
  "\00\00\43\00\00\00\00\43\00\00\00\00\41\00\41\00"
  "\43\00\00\00\00\44\00\00\00\00\00\00\00\00\42\00"
  "\43\00\00\00\00\44\00\00\00\00\00\00\00\00\43\00"
  "\00\00\00\43\00\00\00\00\43\00\00\00\00\41\00\43"
  "\00\00\00\00\42\00\20\00\10\3b\0b"
)
(module instance)
(assert_return (invoke "type-i32") (i32.const 0x132))
(assert_return (invoke "type-i64") (i64.const 0x164))
(assert_return (invoke "type-f32") (f32.const 0x1.e64p+11))
(assert_return (invoke "type-f64") (f64.const 0x1.ec8p+11))
(assert_return (invoke "type-first-i32") (i32.const 0x20))
(assert_return (invoke "type-first-i64") (i64.const 0x40))
(assert_return (invoke "type-second-i32") (i32.const 0x20))
(assert_return (invoke "type-second-i64") (i64.const 0x40))
(assert_return (invoke "type-second-f32") (f32.const 0x1p+5))
(assert_return (invoke "as-binary-all-operands") (i32.const 0x7))
(assert_return (invoke "as-mixed-operands") (i32.const 0x20))
(assert_return (invoke "fac" (i64.const 0x0)) (i64.const 0x1))
(assert_return (invoke "fac" (i64.const 0x1)) (i64.const 0x1))
(assert_return (invoke "fac" (i64.const 0x5)) (i64.const 0x78))
(assert_return
  (invoke "fac" (i64.const 0x19))
  (i64.const 0x619f_b090_7bc0_0000)
)
(assert_return
  (invoke "fac-acc" (i64.const 0x0) (i64.const 0x1))
  (i64.const 0x1)
)
(assert_return
  (invoke "fac-acc" (i64.const 0x1) (i64.const 0x1))
  (i64.const 0x1)
)
(assert_return
  (invoke "fac-acc" (i64.const 0x5) (i64.const 0x1))
  (i64.const 0x78)
)
(assert_return
  (invoke "fac-acc" (i64.const 0x19) (i64.const 0x1))
  (i64.const 0x619f_b090_7bc0_0000)
)
(assert_return (invoke "fib" (i64.const 0x0)) (i64.const 0x1))
(assert_return (invoke "fib" (i64.const 0x1)) (i64.const 0x1))
(assert_return (invoke "fib" (i64.const 0x2)) (i64.const 0x2))
(assert_return (invoke "fib" (i64.const 0x5)) (i64.const 0x8))
(assert_return (invoke "fib" (i64.const 0x14)) (i64.const 0x2ac2))
(assert_return (invoke "even" (i64.const 0x0)) (i32.const 0x2c))
(assert_return (invoke "even" (i64.const 0x1)) (i32.const 0x63))
(assert_return (invoke "even" (i64.const 0x64)) (i32.const 0x2c))
(assert_return (invoke "even" (i64.const 0x4d)) (i32.const 0x63))
(assert_return (invoke "odd" (i64.const 0x0)) (i32.const 0x63))
(assert_return (invoke "odd" (i64.const 0x1)) (i32.const 0x2c))
(assert_return (invoke "odd" (i64.const 0xc8)) (i32.const 0x63))
(assert_return (invoke "odd" (i64.const 0x4d)) (i32.const 0x2c))
(assert_return (invoke "as-if-condition") (i32.const 0x1))
(assert_return (invoke "as-br_if-first") (i32.const 0x132))
(assert_return (invoke "as-br_if-last") (i32.const 0x2))
(assert_return (invoke "as-return-value") (i32.const 0x132))
(assert_return (invoke "as-drop-operand"))
(assert_return (invoke "as-br-value") (i32.const 0x132))
(assert_return (invoke "as-binary-left") (i32.const 0xb))
(assert_return (invoke "as-binary-right") (i32.const 0x9))
(assert_return (invoke "as-test-operand") (i32.const 0x0))
(assert_return (invoke "as-compare-left") (i32.const 0x1))
(assert_return (invoke "as-compare-right") (i32.const 0x1))
(assert_return
  (invoke "return-from-long-argument-list" (i32.const 0x2a))
  (i32.const 0x2a)
)

(module definition binary
  "\00\61\73\6d\01\00\00\00\01\ce\80\80\80\00\0e\60"
  "\00\00\60\00\01\7f\60\01\7f\00\60\03\7f\7c\7f\03"
  "\7f\7c\7f\60\00\03\7f\7e\7f\60\02\7f\7f\01\7f\60"
  "\01\7f\01\7f\60\00\02\7f\7f\60\00\02\7d\7d\60\00"
  "\03\7f\7f\7e\60\03\7f\7f\7e\00\60\02\7f\7f\02\7f"
  "\7f\60\01\7e\01\7e\60\02\7d\7d\01\7d\03\aa\80\80"
  "\80\00\29\00\00\01\01\01\01\00\01\01\01\01\01\01"
  "\05\06\01\01\00\01\01\01\01\01\01\01\01\01\01\09"
  "\01\01\01\01\01\01\01\01\0c\0c\0d\00\05\83\80\80"
  "\80\00\01\00\01\07\aa\84\80\80\00\26\05\65\6d\70"
  "\74\79\00\01\08\73\69\6e\67\75\6c\61\72\00\02\05"
  "\6d\75\6c\74\69\00\03\06\6e\65\73\74\65\64\00\04"
  "\04\64\65\65\70\00\05\0f\61\73\2d\69\66\2d\63\6f"
  "\6e\64\69\74\69\6f\6e\00\06\0a\61\73\2d\69\66\2d"
  "\74\68\65\6e\00\07\0a\61\73\2d\69\66\2d\65\6c\73"
  "\65\00\08\0e\61\73\2d\62\72\5f\69\66\2d\66\69\72"
  "\73\74\00\09\0d\61\73\2d\62\72\5f\69\66\2d\6c\61"
  "\73\74\00\0a\11\61\73\2d\62\72\5f\74\61\62\6c\65"
  "\2d\66\69\72\73\74\00\0b\10\61\73\2d\62\72\5f\74"
  "\61\62\6c\65\2d\6c\61\73\74\00\0c\0d\61\73\2d\63"
  "\61\6c\6c\2d\76\61\6c\75\65\00\0f\0f\61\73\2d\72"
  "\65\74\75\72\6e\2d\76\61\6c\75\65\00\10\0f\61\73"
  "\2d\64\72\6f\70\2d\6f\70\65\72\61\6e\64\00\11\0b"
  "\61\73\2d\62\72\2d\76\61\6c\75\65\00\12\12\61\73"
  "\2d\6c\6f\63\61\6c\2e\73\65\74\2d\76\61\6c\75\65"
  "\00\13\11\61\73\2d\62\69\6e\61\72\79\2d\6f\70\65"
  "\72\61\6e\64\00\14\0f\61\73\2d\74\65\73\74\2d\6f"
  "\70\65\72\61\6e\64\00\15\12\61\73\2d\63\6f\6d\70"
  "\61\72\65\2d\6f\70\65\72\61\6e\64\00\16\12\61\73"
  "\2d\62\69\6e\61\72\79\2d\6f\70\65\72\61\6e\64\73"
  "\00\17\13\61\73\2d\63\6f\6d\70\61\72\65\2d\6f\70"
  "\65\72\61\6e\64\73\00\18\11\61\73\2d\6d\69\78\65"
  "\64\2d\6f\70\65\72\61\6e\64\73\00\19\0a\62\72\65"
  "\61\6b\2d\62\61\72\65\00\1a\0b\62\72\65\61\6b\2d"
  "\76\61\6c\75\65\00\1b\11\62\72\65\61\6b\2d\6d\75"
  "\6c\74\69\2d\76\61\6c\75\65\00\1c\0e\62\72\65\61"
  "\6b\2d\72\65\70\65\61\74\65\64\00\1d\05\70\61\72"
  "\61\6d\00\1e\06\70\61\72\61\6d\73\00\1f\09\70\61"
  "\72\61\6d\73\2d\69\64\00\20\0b\70\61\72\61\6d\2d"
  "\62\72\65\61\6b\00\21\0c\70\61\72\61\6d\73\2d\62"
  "\72\65\61\6b\00\22\0f\70\61\72\61\6d\73\2d\69\64"
  "\2d\62\72\65\61\6b\00\23\07\65\66\66\65\63\74\73"
  "\00\24\05\77\68\69\6c\65\00\25\03\66\6f\72\00\26"
  "\07\6e\65\73\74\69\6e\67\00\27\08\74\79\70\65\2d"
  "\75\73\65\00\28\0a\e0\89\80\80\00\29\82\80\80\80"
  "\00\00\0b\88\80\80\80\00\00\03\40\0b\03\40\0b\0b"
  "\8b\80\80\80\00\00\03\40\01\0b\03\7f\41\07\0b\0b"
  "\bc\80\80\80\00\00\03\40\10\00\10\00\10\00\10\00"
  "\0b\03\7f\10\00\10\00\41\08\10\00\0b\1a\03\04\10"
  "\00\10\00\10\00\41\08\10\00\10\00\10\00\10\00\42"
  "\07\10\00\10\00\10\00\10\00\41\09\10\00\0b\1a\1a"
  "\0b\95\80\80\80\00\00\03\7f\03\40\10\00\02\40\0b"
  "\01\0b\03\7f\10\00\41\09\0b\0b\0b\ff\80\80\80\00"
  "\00\03\7f\02\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02"
  "\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02"
  "\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02"
  "\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02"
  "\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02\7f\03\7f\02"
  "\7f\10\00\41\96\01\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b"
  "\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b"
  "\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\8c"
  "\80\80\80\00\00\03\7f\41\01\0b\04\40\10\00\0b\0b"
  "\8f\80\80\80\00\00\41\01\04\7f\03\7f\41\01\0b\05"
  "\41\02\0b\0b\8f\80\80\80\00\00\41\01\04\7f\41\02"
  "\05\03\7f\41\01\0b\0b\0b\8e\80\80\80\00\00\02\7f"
  "\03\7f\41\01\0b\41\02\0d\00\0b\0b\8e\80\80\80\00"
  "\00\02\7f\41\02\03\7f\41\01\0b\0d\00\0b\0b\90\80"
  "\80\80\00\00\02\7f\03\7f\41\01\0b\41\02\0e\01\00"
  "\00\0b\0b\90\80\80\80\00\00\02\7f\41\02\03\7f\41"
  "\01\0b\0e\01\00\00\0b\0b\84\80\80\80\00\00\20\00"
  "\0b\84\80\80\80\00\00\20\00\0b\89\80\80\80\00\00"
  "\03\7f\41\01\0b\10\0e\0b\88\80\80\80\00\00\03\7f"
  "\41\01\0b\0f\0b\88\80\80\80\00\00\03\7f\41\01\0b"
  "\1a\0b\8c\80\80\80\00\00\02\7f\03\7f\41\01\0b\0c"
  "\00\0b\0b\8d\80\80\80\00\01\01\7f\03\7f\41\01\0b"
  "\21\00\20\00\0b\91\80\80\80\00\00\03\7f\10\00\41"
  "\03\0b\03\7f\10\00\41\04\0b\6c\0b\8a\80\80\80\00"
  "\00\03\7f\10\00\41\0d\0b\45\0b\97\80\80\80\00\00"
  "\03\7d\10\00\43\00\00\40\40\0b\03\7d\10\00\43\00"
  "\00\40\40\0b\5e\0b\8e\80\80\80\00\00\03\07\10\00"
  "\41\03\10\00\41\04\0b\6c\0b\94\80\80\80\00\00\03"
  "\08\10\00\43\00\00\40\40\10\00\43\00\00\40\40\0b"
  "\5e\0b\91\80\80\80\00\00\03\07\10\00\41\03\10\00"
  "\41\04\0b\41\05\6a\6c\0b\b4\80\80\80\00\00\02\40"
  "\03\40\0c\01\0c\00\00\0b\0b\02\40\03\40\41\01\0d"
  "\01\00\0b\0b\02\40\03\40\41\00\0e\00\01\00\0b\0b"
  "\02\40\03\40\41\01\0e\02\01\01\01\00\0b\0b\41\13"
  "\0b\97\80\80\80\00\00\02\7f\41\00\03\02\02\40\41"
  "\12\0c\02\0b\41\14\0c\00\0b\41\13\0b\0b\a7\80\80"
  "\80\00\00\02\09\41\00\41\00\42\00\03\0a\02\40\41"
  "\12\41\6e\42\12\0c\02\0b\41\14\41\6c\42\14\0c\00"
  "\0b\41\13\41\6d\42\13\0b\0b\b4\80\80\80\00\00\02"
  "\7f\03\7f\41\12\0c\01\41\13\0c\01\41\14\41\00\0d"
  "\01\1a\41\14\41\01\0d\01\1a\41\15\0c\01\41\16\41"
  "\00\0e\00\01\41\17\41\01\0e\02\01\01\01\41\15\0b"
  "\0b\0b\8a\80\80\80\00\00\41\01\03\06\41\02\6a\0b"
  "\0b\8a\80\80\80\00\00\41\01\41\02\03\05\6a\0b\0b"
  "\8a\80\80\80\00\00\41\01\41\02\03\0b\0b\6a\0b\95"
  "\80\80\80\00\01\01\7f\41\01\03\06\41\04\6a\22\00"
  "\20\00\41\0a\49\0d\00\0b\0b\98\80\80\80\00\01\01"
  "\7f\41\01\41\02\03\05\6a\22\00\41\03\20\00\41\0a"
  "\49\0d\00\1a\0b\0b\9e\80\80\80\00\01\01\7f\41\00"
  "\21\00\41\01\41\02\03\0b\20\00\41\01\6a\21\00\20"
  "\00\41\0a\49\0d\00\0b\6a\0b\b2\80\80\80\00\01\01"
  "\7f\02\40\03\40\41\01\21\00\20\00\41\03\6c\21\00"
  "\20\00\41\05\6b\21\00\20\00\41\07\6c\21\00\0c\01"
  "\20\00\41\e4\00\6c\21\00\0b\0b\20\00\41\72\46\0b"
  "\a5\80\80\80\00\01\01\7e\42\01\21\01\02\40\03\40"
  "\20\00\50\0d\01\20\00\20\01\7e\21\01\20\00\42\01"
  "\7d\21\00\0c\00\0b\0b\20\01\0b\ab\80\80\80\00\01"
  "\02\7e\42\01\21\01\42\02\21\02\02\40\03\40\20\02"
  "\20\00\56\0d\01\20\01\20\02\7e\21\01\20\02\42\01"
  "\7c\21\02\0c\00\0b\0b\20\01\0b\da\80\80\80\00\01"
  "\02\7d\02\40\03\40\20\00\43\00\00\00\00\5b\0d\01"
  "\20\01\21\02\02\40\03\40\20\02\43\00\00\00\00\5b"
  "\0d\01\20\02\43\00\00\00\00\5d\0d\03\20\03\20\02"
  "\92\21\03\20\02\43\00\00\00\40\93\21\02\0c\00\0b"
  "\0b\20\03\20\00\95\21\03\20\00\43\00\00\80\3f\93"
  "\21\00\0c\00\0b\0b\20\03\0b\bd\80\80\80\00\00\03"
  "\00\0b\03\01\41\00\0b\03\02\1a\0b\41\00\44\00\00"
  "\00\00\00\00\00\00\41\00\03\03\0b\1a\1a\1a\03\01"
  "\41\00\0b\03\02\1a\0b\41\00\44\00\00\00\00\00\00"
  "\00\00\41\00\03\03\0b\1a\1a\1a\0b"
)
(module instance)
(assert_return (invoke "empty"))
(assert_return (invoke "singular") (i32.const 0x7))
(assert_return (invoke "multi") (i32.const 0x8))
(assert_return (invoke "nested") (i32.const 0x9))
(assert_return (invoke "deep") (i32.const 0x96))
(assert_return (invoke "as-if-condition"))
(assert_return (invoke "as-if-then") (i32.const 0x1))
(assert_return (invoke "as-if-else") (i32.const 0x2))
(assert_return (invoke "as-br_if-first") (i32.const 0x1))
(assert_return (invoke "as-br_if-last") (i32.const 0x2))
(assert_return (invoke "as-call-value") (i32.const 0x1))
(assert_return (invoke "as-return-value") (i32.const 0x1))
(assert_return (invoke "as-drop-operand"))
(assert_return (invoke "as-br-value") (i32.const 0x1))
(assert_return (invoke "as-local.set-value") (i32.const 0x1))
(assert_return (invoke "as-binary-operand") (i32.const 0xc))
(assert_return (invoke "as-test-operand") (i32.const 0x0))
(assert_return (invoke "as-binary-operands") (i32.const 0xc))
(assert_return (invoke "as-mixed-operands") (i32.const 0x1b))
(assert_return (invoke "break-bare") (i32.const 0x13))
(assert_return (invoke "break-value") (i32.const 0x12))
(assert_return (invoke "param") (i32.const 0x3))
(assert_return (invoke "params") (i32.const 0x3))
(assert_return (invoke "params-id") (i32.const 0x3))
(assert_return (invoke "effects") (i32.const 0x1))
(assert_return (invoke "while" (i64.const 0x0)) (i64.const 0x1))
(assert_return (invoke "while" (i64.const 0x1)) (i64.const 0x1))
(assert_return (invoke "while" (i64.const 0x2)) (i64.const 0x2))
(assert_return (invoke "while" (i64.const 0x3)) (i64.const 0x6))
(assert_return (invoke "while" (i64.const 0x5)) (i64.const 0x78))
(assert_return
  (invoke "while" (i64.const 0x14))
  (i64.const 0x21c3_677c_82b4_0000)
)
(assert_return (invoke "for" (i64.const 0x0)) (i64.const 0x1))
(assert_return (invoke "for" (i64.const 0x1)) (i64.const 0x1))
(assert_return (invoke "for" (i64.const 0x2)) (i64.const 0x2))
(assert_return (invoke "for" (i64.const 0x3)) (i64.const 0x6))
(assert_return (invoke "for" (i64.const 0x5)) (i64.const 0x78))
(assert_return
  (invoke "for" (i64.const 0x14))
  (i64.const 0x21c3_677c_82b4_0000)
)
(assert_return
  (invoke "nesting" (f32.const 0x0p+0) (f32.const 0x1.cp+2))
  (f32.const 0x0p+0)
)
(assert_return
  (invoke "nesting" (f32.const 0x1.cp+2) (f32.const 0x0p+0))
  (f32.const 0x0p+0)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+0) (f32.const 0x1p+0))
  (f32.const 0x1p+0)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+0) (f32.const 0x1p+1))
  (f32.const 0x1p+1)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+0) (f32.const 0x1.8p+1))
  (f32.const 0x1p+2)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+0) (f32.const 0x1p+2))
  (f32.const 0x1.8p+2)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+0) (f32.const 0x1.9p+6))
  (f32.const 0x1.3ecp+11)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+0) (f32.const 0x1.94p+6))
  (f32.const 0x1.452p+11)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+1) (f32.const 0x1p+0))
  (f32.const 0x1p+0)
)
(assert_return
  (invoke "nesting" (f32.const 0x1.8p+1) (f32.const 0x1p+0))
  (f32.const 0x1p+0)
)
(assert_return
  (invoke "nesting" (f32.const 0x1.4p+3) (f32.const 0x1p+0))
  (f32.const 0x1p+0)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+1) (f32.const 0x1p+1))
  (f32.const 0x1.8p+1)
)
(assert_return
  (invoke "nesting" (f32.const 0x1p+1) (f32.const 0x1.8p+1))
  (f32.const 0x1p+2)
)
(assert_return
  (invoke "nesting" (f32.const 0x1.cp+2) (f32.const 0x1p+2))
  (f32.const 0x1.49e7_9ep+3)
)
(assert_return
  (invoke "nesting" (f32.const 0x1.cp+2) (f32.const 0x1.9p+6))
  (f32.const 0x1.11d8_c4p+12)
)
(assert_return
  (invoke "nesting" (f32.const 0x1.cp+2) (f32.const 0x1.94p+6))
  (f32.const 0x1.452p+11)
)
(assert_return (invoke "type-use"))

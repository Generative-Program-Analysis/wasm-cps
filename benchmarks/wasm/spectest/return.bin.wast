(module definition binary
  "\00\61\73\6d\01\00\00\00\01\9d\80\80\80\00\06\60"
  "\00\00\60\00\01\7c\60\00\01\7f\60\00\01\7e\60\02"
  "\7f\7f\01\7f\60\03\7f\7f\7f\01\7f\03\a5\80\80\80"
  "\00\24\00\00\01\02\02\00\02\00\00\00\02\02\02\02"
  "\02\00\02\02\03\02\02\03\02\04\04\05\02\02\02\02"
  "\02\02\03\02\02\02\07\af\84\80\80\00\22\07\6e\75"
  "\6c\6c\61\72\79\00\01\05\75\6e\61\72\79\00\02\0d"
  "\61\73\2d\66\75\6e\63\2d\66\69\72\73\74\00\03\0b"
  "\61\73\2d\66\75\6e\63\2d\6d\69\64\00\04\0c\61\73"
  "\2d\66\75\6e\63\2d\6c\61\73\74\00\05\0d\61\73\2d"
  "\66\75\6e\63\2d\76\61\6c\75\65\00\06\0e\61\73\2d"
  "\62\6c\6f\63\6b\2d\66\69\72\73\74\00\07\0c\61\73"
  "\2d\62\6c\6f\63\6b\2d\6d\69\64\00\08\0d\61\73\2d"
  "\62\6c\6f\63\6b\2d\6c\61\73\74\00\09\0e\61\73\2d"
  "\62\6c\6f\63\6b\2d\76\61\6c\75\65\00\0a\0d\61\73"
  "\2d\6c\6f\6f\70\2d\66\69\72\73\74\00\0b\0b\61\73"
  "\2d\6c\6f\6f\70\2d\6d\69\64\00\0c\0c\61\73\2d\6c"
  "\6f\6f\70\2d\6c\61\73\74\00\0d\0b\61\73\2d\62\72"
  "\2d\76\61\6c\75\65\00\0e\0d\61\73\2d\62\72\5f\69"
  "\66\2d\63\6f\6e\64\00\0f\0e\61\73\2d\62\72\5f\69"
  "\66\2d\76\61\6c\75\65\00\10\13\61\73\2d\62\72\5f"
  "\69\66\2d\76\61\6c\75\65\2d\63\6f\6e\64\00\11\11"
  "\61\73\2d\62\72\5f\74\61\62\6c\65\2d\69\6e\64\65"
  "\78\00\12\11\61\73\2d\62\72\5f\74\61\62\6c\65\2d"
  "\76\61\6c\75\65\00\13\17\61\73\2d\62\72\5f\74\61"
  "\62\6c\65\2d\76\61\6c\75\65\2d\69\6e\64\65\78\00"
  "\14\0f\61\73\2d\72\65\74\75\72\6e\2d\76\61\6c\75"
  "\65\00\15\0a\61\73\2d\69\66\2d\63\6f\6e\64\00\16"
  "\0a\61\73\2d\69\66\2d\74\68\65\6e\00\17\0a\61\73"
  "\2d\69\66\2d\65\6c\73\65\00\18\0d\61\73\2d\63\61"
  "\6c\6c\2d\66\69\72\73\74\00\1a\0b\61\73\2d\63\61"
  "\6c\6c\2d\6d\69\64\00\1b\0c\61\73\2d\63\61\6c\6c"
  "\2d\6c\61\73\74\00\1c\12\61\73\2d\6c\6f\63\61\6c"
  "\2e\73\65\74\2d\76\61\6c\75\65\00\1d\12\61\73\2d"
  "\6c\6f\63\61\6c\2e\74\65\65\2d\76\61\6c\75\65\00"
  "\1e\0e\61\73\2d\62\69\6e\61\72\79\2d\6c\65\66\74"
  "\00\1f\0f\61\73\2d\62\69\6e\61\72\79\2d\72\69\67"
  "\68\74\00\20\0f\61\73\2d\74\65\73\74\2d\6f\70\65"
  "\72\61\6e\64\00\21\0f\61\73\2d\63\6f\6d\70\61\72"
  "\65\2d\6c\65\66\74\00\22\10\61\73\2d\63\6f\6d\70"
  "\61\72\65\2d\72\69\67\68\74\00\23\0a\a1\84\80\80"
  "\00\24\82\80\80\80\00\00\0b\83\80\80\80\00\00\0f"
  "\0b\8c\80\80\80\00\00\44\00\00\00\00\00\00\08\40"
  "\0f\0b\87\80\80\80\00\00\41\01\0f\41\02\0b\89\80"
  "\80\80\00\00\10\00\41\02\0f\41\03\0b\86\80\80\80"
  "\00\00\01\10\00\0f\0b\88\80\80\80\00\00\01\10\00"
  "\41\03\0f\0b\88\80\80\80\00\00\02\40\0f\10\00\0b"
  "\0b\8a\80\80\80\00\00\02\40\10\00\0f\10\00\0b\0b"
  "\89\80\80\80\00\00\02\40\01\10\00\0f\0b\0b\8b\80"
  "\80\80\00\00\02\7f\01\10\00\41\02\0f\0b\0b\8a\80"
  "\80\80\00\00\03\7f\41\03\0f\41\02\0b\0b\8c\80\80"
  "\80\00\00\03\7f\10\00\41\04\0f\41\02\0b\0b\8b\80"
  "\80\80\00\00\03\7f\01\10\00\41\05\0f\0b\0b\8a\80"
  "\80\80\00\00\02\7f\41\09\0f\0c\00\0b\0b\88\80\80"
  "\80\00\00\02\40\0f\0d\00\0b\0b\8f\80\80\80\00\00"
  "\02\7f\41\08\0f\41\01\0d\00\1a\41\07\0b\0b\8f\80"
  "\80\80\00\00\02\7f\41\06\41\09\0f\0d\00\1a\41\07"
  "\0b\0b\8f\80\80\80\00\00\02\40\42\09\0f\0e\02\00"
  "\00\00\0b\42\7f\0b\91\80\80\80\00\00\02\7f\41\0a"
  "\0f\41\01\0e\02\00\00\00\41\07\0b\0b\90\80\80\80"
  "\00\00\02\7f\41\06\41\0b\0f\0e\01\00\00\41\07\0b"
  "\0b\86\80\80\80\00\00\42\07\0f\0f\0b\8d\80\80\80"
  "\00\00\41\02\0f\04\7f\41\00\05\41\01\0b\0b\8d\80"
  "\80\80\00\00\20\00\04\7f\41\03\0f\05\20\01\0b\0b"
  "\8d\80\80\80\00\00\20\00\04\7f\20\01\05\41\04\0f"
  "\0b\0b\84\80\80\80\00\00\41\7f\0b\8b\80\80\80\00"
  "\00\41\0c\0f\41\02\41\03\10\19\0b\8b\80\80\80\00"
  "\00\41\01\41\0d\0f\41\03\10\19\0b\8b\80\80\80\00"
  "\00\41\01\41\02\41\0e\0f\10\19\0b\8b\80\80\80\00"
  "\01\01\7d\41\11\0f\21\00\41\7f\0b\89\80\80\80\00"
  "\01\01\7f\41\01\0f\22\00\0b\88\80\80\80\00\00\41"
  "\03\0f\41\0a\6a\0b\88\80\80\80\00\00\42\0a\42\2d"
  "\0f\7d\0b\86\80\80\80\00\00\41\2c\0f\45\0b\8f\80"
  "\80\80\00\00\41\2b\0f\44\00\00\00\00\00\00\24\40"
  "\65\0b\8b\80\80\80\00\00\43\00\00\20\41\41\2a\0f"
  "\5c\0b"
)
(module instance)
(assert_return (invoke "nullary"))
(assert_return (invoke "unary") (f64.const 0x1.8p+1))
(assert_return (invoke "as-func-first") (i32.const 0x1))
(assert_return (invoke "as-func-mid") (i32.const 0x2))
(assert_return (invoke "as-func-last"))
(assert_return (invoke "as-func-value") (i32.const 0x3))
(assert_return (invoke "as-block-first"))
(assert_return (invoke "as-block-mid"))
(assert_return (invoke "as-block-last"))
(assert_return (invoke "as-block-value") (i32.const 0x2))
(assert_return (invoke "as-loop-first") (i32.const 0x3))
(assert_return (invoke "as-loop-mid") (i32.const 0x4))
(assert_return (invoke "as-loop-last") (i32.const 0x5))
(assert_return (invoke "as-br-value") (i32.const 0x9))
(assert_return (invoke "as-br_if-cond"))
(assert_return (invoke "as-br_if-value") (i32.const 0x8))
(assert_return (invoke "as-br_table-index") (i64.const 0x9))
(assert_return (invoke "as-br_table-value") (i32.const 0xa))
(assert_return (invoke "as-return-value") (i64.const 0x7))
(assert_return (invoke "as-if-cond") (i32.const 0x2))
(assert_return
  (invoke "as-if-then" (i32.const 0x1) (i32.const 0x6))
  (i32.const 0x3)
)
(assert_return
  (invoke "as-if-then" (i32.const 0x0) (i32.const 0x6))
  (i32.const 0x6)
)
(assert_return
  (invoke "as-if-else" (i32.const 0x0) (i32.const 0x6))
  (i32.const 0x4)
)
(assert_return
  (invoke "as-if-else" (i32.const 0x1) (i32.const 0x6))
  (i32.const 0x6)
)
(assert_return (invoke "as-call-first") (i32.const 0xc))
(assert_return (invoke "as-local.set-value") (i32.const 0x11))
(assert_return (invoke "as-binary-left") (i32.const 0x3))
(assert_return (invoke "as-test-operand") (i32.const 0x2c))
(assert_return (invoke "as-compare-left") (i32.const 0x2b))
